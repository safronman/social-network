{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Profile/Posts/Posts.module.css","components/LoginForm/LoginForm.module.css","components/Users/Users.module.css","img/logo.svg","components/Header/UnreadMessagesCount/UnreadMesagesCount.module.css","components/UserProfile/UserProfile.module.css","components/Navbar/Navbar.module.css","serviceWorker.js","components/Navbar/Navbar.js","components/Settings/Settings.js","components/Profile/Posts/Post/Post.js","components/Profile/Posts/AddPost/AddPost.js","dal/axiosInstance.js","dal/services.js","redux/reducers/profilePageReducer.js","components/Profile/Posts/AddPost/AddPostContainer.js","components/Profile/Posts/Posts.js","components/Profile/Posts/PostsContainer.js","components/Profile/ContactsField/ContactsField.js","components/Profile/ContactsField/ContactsFieldContainer.js","components/Profile/AboutMeField/AboutMeField.js","components/Profile/LookingForAJobField/LookingForAJobField.js","components/Profile/LookingForAJobField/LookingForAJobFieldContainer.js","components/Profile/LookingForAJobDescField/LookingForAJobDescField.js","components/Profile/LookingForAJobDescField/LookingForAJobDescFieldContainer.js","components/Profile/FullNameField/FullNameField.js","components/Profile/FullNameField/FullNameFieldContainer.js","components/Profile/AboutMeField/AboutMeFieldContainer.js","components/Profile/ProfilePhoto/ProfilePhoto.js","components/Profile/ProfilePhoto/ProfilePhotoContainer.js","components/Profile/Profile.js","components/Profile/ProfileContainer.js","redux/requestStatuses.js","redux/reducers/usersPageReducer.js","components/Users/User/User.js","components/Users/Users.js","components/Users/UsersContainer.js","components/Header/UnreadMessagesCount/UnreadMesagesCount.js","redux/reducers/dialogsPageReducer.js","components/Header/UnreadMessagesCount/UnreadMesagesCountContainer.js","components/Header/Header.js","redux/reducers/authorizationReducer.js","components/Header/HeaderContainer.js","components/UserProfile/UserProfile.js","redux/reducers/userProfileReducer.js","components/UserProfile/UserProfileContainer.js","components/NotFound/NotFound.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js","redux/reducers/loginPageReducer.js","components/LoginForm/LoginForm.js","components/LoginForm/LoginFormContainer.js","App.js","index.js","components/Header/Header.module.css","components/Users/User/User.module.css","components/Profile/Posts/AddPost/AddPost.module.css","components/Profile/Profile.module.css","components/NotFound/NotFound.module.css","components/Profile/Posts/Post/Post.module.css"],"names":["module","exports","wrapper","dialogsWrapper","messagesWrapper","dialog","currentDialog","newMessagesLabel","ownerMessagesWrapper","ownerMessagesContent","deleteOwnerMessage","userMessagesWrapper","userMessagesContent","deleteUserMessage","avatar","name","addMessagesWrapper","addMessagesField","addMessagesBtn","redirectToLoginPage","postList","fieldWrapper","fieldLabel","fieldCheckboxLabel","fieldInput","testDataWrapper","testTitle","testValue","btnWrapper","btn","statusError","userList","__webpack_require__","p","counter","titleValue","titleKey","contactsTitleKey","contactsWrapper","contactsTitle","nav","list","link","activeLink","Boolean","window","location","hostname","match","Navbar","react_default","a","createElement","className","styles","NavLink","exact","to","activeClassName","Settings","Post","_ref","message","likes","postItem","postAvatar","src","alt","AddPost","props","newPost","heading","newPostTextarea","onChange","event","addCurrentMessage","currentTarget","value","currentMessage","placeholder","newPostBtn","onClick","addPost","axiosInstance","axios","baseURL","withCredentials","headers","API-KEY","getDialogs","get","then","res","data","updateDialogs","userId","put","concat","getMessages","ADD_POST","SET_OWNER_ID","SET_AVATAR","initialState","postsData","id","editMode","ownerId","fullName","aboutMe","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","lookingForAJob","lookingForAJobDescription","currentMessageSelector","state","profilePage","editModeSelector","fullNameSelector","aboutMeSelector","lookingForAJobSelector","lookingForAJobDescriptionSelector","avatarSelector","setOwnerFullNameAC","type","setOwnerAboutMeAC","setOwnerLookingForAJobAC","setOwnerLookingForAJobDescriptionAC","setAvatarAC","img","uploadAvatarTC","file","dispatch","formData","FormData","append","post","Content-Type","uploadPhoto","photos","small","profilePageReducer","arguments","length","undefined","action","Object","objectSpread","toConsumableArray","defineProperty","item","connect","addCurrentMessageActionCreator","addPostActionCreator","Posts","posts","map","Posts_Post_Post","key","AddPostContainer","ContactsField","keys","i","editContacts","editModeTitle","newValue","setNewContactsValue","onContactsChange","setNewContactsValueAC","AboutMeField","setCurrentAboutMeValue","propTypes","PropTypes","string","LookingForAJobField","checked","setLookingForAJobChangeValue","LookingForAJobDescField","setCurrentLookingForAJobDescriptionValue","FullNameField","setCurrentFullNameValue","ProfilePhoto","profilePhotoWrapper","profilePhotoImg","uploadAvatar","target","files","Profile","authorization","isAuth","ProfilePhotoContainer","FullNameFieldContainer","AboutMeFieldContainer","ContactsFieldContainer","LookingForAJobFieldContainer","LookingForAJobDescFieldContainer","saveProfile","PostsContainer","Fragment","ProfileContainer","_React$Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","getMyProfile","userInfo","setOwnerId","prevProps","components_Profile_Profile","React","Component","response","getMyProfileTC","profile","saveProfileTC","setOwnerIdAC","statuses","MySwal","withReactContent","Swal","SET_STATUS","SET_USERS","SUBSCRIBE","UNSUBSCRIBE","status","users","currentUserId","statusSelector","usersPage","currentUserIdSelector","transformedUsersSelector","usersSelector","setStatusAC","getUsersTC","items","addToFriendsTC","resultCode","subscribeAC","fire","text","messages","catch","removeFromFriendsTC","delete","unSubscribeAC","usersPageReducer","newState","forEach","followed","User","substring","data-user-id","followBtn","removeFromFriends","Number","dataset","addToFriends","sendBtn","Users","usersList","Users_User_User","UsersContainer","getUsers","components_Users_Users","UnreadMessagesCount","unreadMessagesCounter","SET_DIALOGS","SET_MESSAGES","dialogs","currentDialogId","dialogsSelector","dialogsPage","currentDialogIdSelector","messagesSelector","unreadMessagesCounterSelector","setDialogsAC","setMessagesAC","setCurrentDialogIdAC","sendMessageTC","body","sendMessage","deleteMessageTC","messageId","deleteMessage","newMessagesCountTC","count","updateUnreadDialogTC","date","getNewMessages","dialogsPageReducer","UnreadMessagesCountContainer","_this","setInterval","newMessagesCount","UnreadMesagesCount","withRouter","Header","showNickName","info","userName","imgWrapper","UnreadMesagesCountContainer","logOutBtn","logOut","setAuth","history","push","header","logo","SET_IS_AUTH","SET_USER_ID","avatarUrl","isAuthSelector","userIdSelector","userNameSelector","setAuthAC","setUserNameAC","login","setUserIdAC","authMeTC","authorizationReducer","HeaderContainer","authMe","components_Header_Header","UserProfile","userProfile","userProfileReducer","UserProfileContainer","getUserProfile","params","setCurrentUserId","components_UserProfile_UserProfile","setUserAboutMeAC","setUserContactsAC","setUserLookingForAJobAC","setUserLookingForAJobDescriptionAC","getUserProfileTC","setCurrentUserIdAC","NotFound","title","desc","Dialogs","senderId","onDeleteMessageClick","senderName","newMessageRef","createRef","hasNewMessages","initialRequests","String","ref","current","DialogsContainer","lastMessage","updateUnreadDialog","addedAt","components_Dialogs_Dialogs","initialRequestsTC","SET_MESSAGE","loginPage","messageSelector","loginTC","email","password","rememberMe","loginPageReducer","LoginForm","handleSubmit","pristine","reset","submitting","Redirect","errorMessage","onSubmit","htmlFor","Field","component","disabled","LoginFormUnderReduxForm","reduxForm","form","LoginFormContainer","call","submit","bind","assertThisInitialized","values","saveData","assign","mail","App","Header_HeaderContainer","components_Navbar_Navbar","Users_UsersContainer","Switch","Route","path","render","LoginForm_LoginFormContainer","combinedReducers","combineReducers","formReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","es","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9075092a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Dialogs_wrapper__2-nou\",\"dialogsWrapper\":\"Dialogs_dialogsWrapper__TpEGK\",\"messagesWrapper\":\"Dialogs_messagesWrapper__1hRx_\",\"dialog\":\"Dialogs_dialog__3OUQJ\",\"currentDialog\":\"Dialogs_currentDialog__3dZch\",\"newMessagesLabel\":\"Dialogs_newMessagesLabel__3v2JQ\",\"ownerMessagesWrapper\":\"Dialogs_ownerMessagesWrapper__sBJrb\",\"ownerMessagesContent\":\"Dialogs_ownerMessagesContent__2KgzY\",\"deleteOwnerMessage\":\"Dialogs_deleteOwnerMessage__1iKNh\",\"userMessagesWrapper\":\"Dialogs_userMessagesWrapper__3jBd7 Dialogs_ownerMessagesWrapper__sBJrb\",\"userMessagesContent\":\"Dialogs_userMessagesContent__10lWb Dialogs_ownerMessagesContent__2KgzY\",\"deleteUserMessage\":\"Dialogs_deleteUserMessage__3uFtZ Dialogs_deleteOwnerMessage__1iKNh\",\"avatar\":\"Dialogs_avatar__2Sffs\",\"name\":\"Dialogs_name__1SF9l\",\"addMessagesWrapper\":\"Dialogs_addMessagesWrapper__1mWsr\",\"addMessagesField\":\"Dialogs_addMessagesField__1wK-2\",\"addMessagesBtn\":\"Dialogs_addMessagesBtn__2bxno index_commonBtn__3wLwH\",\"redirectToLoginPage\":\"Dialogs_redirectToLoginPage__3ZQIX index_redirectToLoginPage__26ZeN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postList\":\"Posts_postList__iLW5m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"LoginForm_wrapper__16Spw\",\"fieldWrapper\":\"LoginForm_fieldWrapper__2TgY-\",\"fieldLabel\":\"LoginForm_fieldLabel__w1uDn\",\"fieldCheckboxLabel\":\"LoginForm_fieldCheckboxLabel__21DtP\",\"fieldInput\":\"LoginForm_fieldInput__118ve\",\"testDataWrapper\":\"LoginForm_testDataWrapper__2-OHc LoginForm_wrapper__16Spw\",\"testTitle\":\"LoginForm_testTitle__1QhhH\",\"testValue\":\"LoginForm_testValue__2O-Ib\",\"btnWrapper\":\"LoginForm_btnWrapper__v51xC\",\"btn\":\"LoginForm_btn__3GLKC index_commonBtn__3wLwH\",\"statusError\":\"LoginForm_statusError__nzJdK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userList\":\"Users_userList__4QA-9\"};","module.exports = __webpack_public_path__ + \"static/media/logo.e06e0dcf.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"UnreadMesagesCount_counter__1yPxY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UserProfile_wrapper__2KmYD Profile_wrapper__28QXg\",\"titleValue\":\"UserProfile_titleValue__rSUIx Profile_titleValue__9wIKP\",\"titleKey\":\"UserProfile_titleKey__1h1dl Profile_titleKey__1Pwdh Profile_titleValue__9wIKP\",\"contactsTitleKey\":\"UserProfile_contactsTitleKey__1hrLR Profile_contactsTitleKey__2j0sr Profile_titleKey__1Pwdh Profile_titleValue__9wIKP\",\"contactsWrapper\":\"UserProfile_contactsWrapper__2Bh6Y Profile_contactsWrapper__1ljo1\",\"contactsTitle\":\"UserProfile_contactsTitle__35Iir Profile_contactsTitle__322WF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1qsfk\",\"list\":\"Navbar_list__3eMFr\",\"link\":\"Navbar_link__2lnGH\",\"activeLink\":\"Navbar_activeLink__3oaG-\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport styles from './Navbar.module.css';\r\nimport NavLink from \"react-router-dom/es/NavLink\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={styles.nav}>\r\n            <ul className={styles.list}>\r\n                <li>\r\n                    <NavLink exact to='/' className={styles.link} activeClassName={styles.activeLink}>Login</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to='/profile' className={styles.link} activeClassName={styles.activeLink}>Profile</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to='/dialogs' className={styles.link} activeClassName={styles.activeLink}>Dialogs</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to='/settings' className={styles.link}\r\n                             activeClassName={styles.activeLink}>Settings</NavLink>\r\n                </li>\r\n\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <h2>Settings</h2>\r\n    );\r\n};\r\n\r\nexport default Settings;","import React from 'react';\r\nimport styles from './Post.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Post = ({message, likes, avatar}) => {\r\n\r\n    return (\r\n        <div className={styles.postItem}>\r\n            <div>\r\n                <img className={styles.postAvatar} src={avatar ? avatar : 'https://www.fillmurray.com/50/50'} alt=\"avatar\"/>\r\n                <p>{message}</p>\r\n            </div>\r\n            <div>\r\n                <div>like: {likes}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nPost.propTypes = {\r\n    message: PropTypes.string,\r\n    likes: PropTypes.number,\r\n    avatar: PropTypes.string\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport styles from './AddPost.module.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddPost = (props) => {\r\n\r\n    let onTextareaChange = (event) => {\r\n        props.addCurrentMessage(event.currentTarget.value);\r\n    };\r\n\r\n    let onAddPostClick = () => {\r\n        props.addPost(props.currentMessage);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.newPost}>\r\n            <h2 className={styles.heading}>My posts</h2>\r\n            <textarea className={styles.newPostTextarea}\r\n                      onChange={onTextareaChange}\r\n                      value={props.currentMessage}\r\n                      placeholder=\"Add text\"\r\n            />\r\n            <button className={styles.newPostBtn} onClick={onAddPostClick}>Add post</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nAddPost.propTypes = {\r\n    currentMessage: PropTypes.string\r\n};\r\n\r\nexport default AddPost;","import * as axios from \"axios\";\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'e394c5d5-ee32-4ec0-bd66-cc95dd95ee43'\r\n    }\r\n});\r\n\r\nexport default axiosInstance;\r\n","import axiosInstance from \"./../dal/axiosInstance\";\r\n\r\nexport const getDialogs = () => {\r\n    return axiosInstance.get('dialogs')\r\n        .then(res => {\r\n            return res.data\r\n        })\r\n};\r\n\r\nexport const updateDialogs = (userId) => {\r\n    return axiosInstance.put(`dialogs/${userId}`)\r\n        .then(res => {\r\n            return res.data\r\n        })\r\n};\r\n\r\nexport const getMessages = (userId) => {\r\n    return axiosInstance.get(`dialogs/${userId}/messages`)\r\n        .then(res => {\r\n            return res.data\r\n        })\r\n};\r\n\r\nexport const sendMessage = (userId, body) => {\r\n    return axiosInstance.post(`dialogs/${userId}/messages`, {body})\r\n        .then(res => {\r\n            return res.data\r\n        })\r\n};\r\n\r\nexport const deleteMessage = (messageId) => {\r\n    return axiosInstance.delete(`dialogs/messages/${messageId}`)\r\n        .then(res => {\r\n            return res.data\r\n        })\r\n};\r\n\r\nexport const newMessagesCount = () => {\r\n    return axiosInstance.get('dialogs/messages/new/count')\r\n        .then(res => {\r\n            return res.data\r\n        })\r\n};\r\n\r\nexport const getNewMessages = (userId, date) => {\r\n    return axiosInstance.get(`dialogs/${userId}/messages/new?newerThen=${date}`)\r\n        .then(res => {\r\n            return res.data\r\n        })\r\n};\r\n\r\nexport const uploadPhoto = (file) => {\r\n    let formData = new FormData();\r\n    formData.append('image', file);\r\n    return axiosInstance.post(`profile/photo`, formData, {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    })\r\n        .then(res => {\r\n            return res.data\r\n        })\r\n};\r\n\r\n","import axiosInstance from \"../../dal/axiosInstance\";\r\nimport {uploadPhoto} from \"../../dal/services\";\r\n\r\n// Actions\r\nconst ADD_CURRENT_MESSAGE = 'social-network/profile-page/ADD_CURRENT_MESSAGE';\r\nconst ADD_POST = 'social-network/profile-page/ADD_POST';\r\nconst TOGGLE_EDIT_MODE = 'social-network/profile-page/TOGGLE_EDIT_MODE';\r\nconst SET_OWNER_ID = 'social-network/profile-page/SET_OWNER_ID';\r\nconst SET_OWNER_FULL_NAME = 'social-network/profile-page/SET_OWNER_FULL_NAME';\r\nconst SET_OWNER_ABOUT_ME = 'social-network/profile-page/SET_OWNER_ABOUT_ME';\r\nconst SET_OWNER_CONTACTS = 'social-network/profile-page/SET_OWNER_CONTACTS';\r\nconst SET_OWNER_LOOKING_FOR_A_JOB = 'social-network/profile-page/SET_OWNER_LOOKING_FOR_A_JOB';\r\nconst SET_OWNER_LOOKING_FOR_A_JOB_DESCRIPTION = 'social-network/profile-page/SET_OWNER_LOOKING_FOR_A_JOB_DESCRIPTION';\r\nconst SET_NEW_CONTACTS_VALUE = 'social-network/profile-page/SET_NEW_CONTACTS_VALUE';\r\nconst SET_AVATAR = 'social-network/profile-page/SET_AVATAR';\r\n\r\n\r\n// Initial state\r\nlet initialState = {\r\n    postsData: [\r\n        {\r\n            id: 1,\r\n            message: \"Разнообразный и богатый опыт дальнейшее развитие различных форм деятельности позволяет оценить значение новых предложений. Товарищи! сложившаяся структура организации требуют определения и уточнения существенных финансовых и административных условий. Товарищи! новая модель организационной деятельности в значительной степени обуславливает создание форм развития.\",\r\n            likes: 125\r\n        },\r\n        {\r\n            id: 2,\r\n            message: \"Задача организации, в особенности же постоянное информационно-пропагандистское обеспечение нашей деятельности играет важную роль в формировании системы обучения кадров, соответствует насущным потребностям. Повседневная практика показывает, что дальнейшее развитие различных форм деятельности играет важную роль в формировании новых предложений.\",\r\n            likes: 232\r\n        }\r\n    ],\r\n    currentMessage: '',\r\n    editMode: false,\r\n    ownerId: null,\r\n    fullName: '',\r\n    aboutMe: '',\r\n    contacts: {\r\n        facebook: '',\r\n        github: '',\r\n        instagram: '',\r\n        mainLink: '',\r\n        twitter: '',\r\n        vk: '',\r\n        website: '',\r\n        youtube: ''\r\n    },\r\n    lookingForAJob: false,\r\n    lookingForAJobDescription: '',\r\n    avatar: null\r\n};\r\n\r\n\r\n// Selectors\r\nexport const currentMessageSelector = state => state.profilePage.currentMessage;\r\nexport const editModeSelector = state => state.profilePage.editMode;\r\nexport const fullNameSelector = state => state.profilePage.fullName;\r\nexport const aboutMeSelector = state => state.profilePage.aboutMe;\r\nexport const lookingForAJobSelector = state => state.profilePage.lookingForAJob;\r\nexport const lookingForAJobDescriptionSelector = state => state.profilePage.lookingForAJobDescription;\r\nexport const avatarSelector = state => state.profilePage.avatar;\r\n\r\n\r\n// Reducer\r\nconst profilePageReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_CURRENT_MESSAGE:\r\n            return {\r\n                ...state,\r\n                currentMessage: action.message\r\n            };\r\n\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, {\r\n                    id: 4,\r\n                    message: action.message,\r\n                    likes: 0\r\n                }],\r\n                currentMessage: ''\r\n            };\r\n\r\n        case TOGGLE_EDIT_MODE:\r\n            return {\r\n                ...state,\r\n                editMode: !state.editMode\r\n            };\r\n\r\n        case SET_OWNER_ID:\r\n            return {\r\n                ...state,\r\n                ownerId: action.id\r\n            };\r\n\r\n        case SET_OWNER_FULL_NAME:\r\n            return {\r\n                ...state,\r\n                fullName: action.value\r\n            };\r\n\r\n        case SET_OWNER_ABOUT_ME:\r\n            return {\r\n                ...state,\r\n                aboutMe: action.value\r\n            };\r\n\r\n        case SET_OWNER_CONTACTS:\r\n            return {\r\n                ...state,\r\n                contacts: action.value\r\n            };\r\n\r\n        case SET_NEW_CONTACTS_VALUE:\r\n            return {\r\n                ...state,\r\n                contacts: {\r\n                    ...state.contacts,\r\n                    [action.item] : action.value\r\n                }\r\n            };\r\n\r\n        case SET_OWNER_LOOKING_FOR_A_JOB:\r\n            return {\r\n                ...state,\r\n                lookingForAJob: action.value\r\n            };\r\n\r\n        case SET_OWNER_LOOKING_FOR_A_JOB_DESCRIPTION:\r\n            return {\r\n                ...state,\r\n                lookingForAJobDescription: action.value\r\n            };\r\n\r\n        case SET_AVATAR:\r\n            return {\r\n                ...state,\r\n                avatar: action.img\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n// Action Creators\r\nexport const addCurrentMessageActionCreator = (message) => ({type: ADD_CURRENT_MESSAGE, message});\r\nexport const addPostActionCreator = (message) => ({type: ADD_POST, message});\r\nexport const toggleEditModeAC = () => ({type: TOGGLE_EDIT_MODE});\r\nexport const setOwnerIdAC = (id) => ({type: SET_OWNER_ID, id});\r\nexport const setOwnerFullNameAC = (value) => ({type: SET_OWNER_FULL_NAME, value});\r\nexport const setOwnerAboutMeAC = (value) => ({type: SET_OWNER_ABOUT_ME, value});\r\nexport const setOwnerContactsAC = (value) => ({type: SET_OWNER_CONTACTS, value});\r\nexport const setOwnerLookingForAJobAC = (value) => ({type: SET_OWNER_LOOKING_FOR_A_JOB, value});\r\nexport const setOwnerLookingForAJobDescriptionAC = (value) => ({type: SET_OWNER_LOOKING_FOR_A_JOB_DESCRIPTION, value});\r\nexport const setNewContactsValueAC = (value, item) => ({type: SET_NEW_CONTACTS_VALUE, value, item});\r\nexport const setAvatarAC = (img) => ({type: SET_AVATAR, img});\r\n\r\n\r\n//Thunk Creators\r\nexport let getMyProfileTC = (id) => (dispatch) => {\r\n    axiosInstance.get(`profile/${id}`)\r\n        .then((response) => {\r\n            dispatch(setOwnerFullNameAC(response.data.fullName));\r\n            dispatch(setOwnerAboutMeAC(response.data.aboutMe));\r\n            dispatch(setOwnerContactsAC(response.data.contacts));\r\n            dispatch(setOwnerLookingForAJobAC(response.data.lookingForAJob));\r\n            dispatch(setOwnerLookingForAJobDescriptionAC(response.data.lookingForAJobDescription));\r\n            dispatch(setAvatarAC(response.data.photos.small));\r\n        })\r\n};\r\n\r\nexport let saveProfileTC = (profile) => (dispatch) => {\r\n    axiosInstance.put('profile', {\r\n        fullName: profile.fullName,\r\n        aboutMe: profile.aboutMe,\r\n        contacts: {\r\n            facebook: profile.contacts.facebook,\r\n            github: profile.contacts.github,\r\n            instagram: profile.contacts.instagram,\r\n            mainLink: profile.contacts.mainLink,\r\n            twitter: profile.contacts.twitter,\r\n            vk: profile.contacts.vk,\r\n            website: profile.contacts.website,\r\n            youtube: profile.contacts.youtube\r\n        },\r\n        lookingForAJob: profile.lookingForAJob,\r\n        lookingForAJobDescription: profile.lookingForAJobDescription\r\n    })\r\n};\r\n\r\nexport let uploadAvatarTC = (file) => (dispatch) => {\r\n    uploadPhoto(file)\r\n        .then((res) => {\r\n            dispatch(setAvatarAC(res.data.photos.small))\r\n        })\r\n};\r\n\r\n\r\nexport default profilePageReducer;","import AddPost from \"./AddPost\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addCurrentMessageActionCreator,\r\n    addPostActionCreator,\r\n    currentMessageSelector\r\n} from \"../../../../redux/reducers/profilePageReducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        currentMessage: currentMessageSelector(state)\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addCurrentMessage: (message) => {\r\n            dispatch(addCurrentMessageActionCreator(message))\r\n        },\r\n        addPost: (message) => {\r\n            dispatch(addPostActionCreator(message))\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPost);","import React from 'react';\r\nimport styles from './Posts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport PropTypes from \"prop-types\";\r\nimport AddPostContainer from \"./AddPost/AddPostContainer\";\r\n\r\nconst Posts = (props) => {\r\n\r\n    let posts = props.postsData.map(item => {\r\n        return <Post key={item.id} message={item.message} likes={item.likes} avatar={props.avatar}/>\r\n    });\r\n\r\n    return (\r\n        <div className={styles.postList}>\r\n            <AddPostContainer/>\r\n            {posts}\r\n        </div>\r\n    );\r\n};\r\n\r\nPosts.propTypes = {\r\n    postsData: PropTypes.array,\r\n    avatar: PropTypes.string\r\n};\r\n\r\nexport default Posts;","import {connect} from \"react-redux\";\r\nimport Posts from \"./Posts\";\r\nimport {avatarSelector} from \"../../../redux/reducers/profilePageReducer\";\r\n\r\nlet mapStateToProps = (state)=> {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n        avatar: avatarSelector(state)\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Posts);","import React from 'react';\r\nimport styles from './../Profile.module.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactsField = (props) => {\r\n\r\n    let onContactsChange = (newValue, item) => {\r\n        props.setNewContactsValue(newValue, item);\r\n    };\r\n\r\n    let contacts = Object.keys(props.contacts).map((item, i) => {\r\n        return (\r\n            <div className={styles.contactsWrapper} key={i}>\r\n                <p className={styles.contactsTitle}>{item}: </p>\r\n                <div>{props.contacts[item]}</div>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    let editContacts = Object.keys(props.contacts).map((item, i) => {\r\n        return (\r\n            <div className={styles.contactsWrapper} key={i}>\r\n                <p className={styles.contactsTitle}>{item}: </p>\r\n                <input type=\"text\" className={styles.editModeTitle}\r\n                       value={props.contacts[item]}\r\n                       onChange={(event) => {\r\n                           onContactsChange(event.currentTarget.value, item)\r\n                       }}\r\n                />\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className={styles.contactsWrapper}>\r\n            <p className={styles.contactsTitleKey}>Контакты</p>\r\n            {\r\n                props.editMode ?\r\n                    <div>{editContacts}</div> :\r\n                    <div>{contacts}</div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nContactsField.propTypes = {\r\n    editMode: PropTypes.bool,\r\n    aboutMe: PropTypes.object\r\n};\r\n\r\nexport default ContactsField;","import {connect} from \"react-redux\";\r\nimport {editModeSelector, setNewContactsValueAC} from \"../../../redux/reducers/profilePageReducer\";\r\nimport ContactsField from \"./ContactsField\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        editMode: editModeSelector(state),\r\n        contacts: state.profilePage.contacts\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setNewContactsValue: (value, item) => {\r\n            dispatch(setNewContactsValueAC(value, item));\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsField);","import React from 'react';\r\nimport styles from './../Profile.module.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AboutMeField = (props) => {\r\n\r\n    let onAboutMeChange = (event) => {\r\n        props.setCurrentAboutMeValue(event.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <p className={styles.titleKey}>Обо мне</p>\r\n            {\r\n                props.editMode ?\r\n                    <textarea className={styles.editModeTitle}\r\n                              value={props.aboutMe}\r\n                              onChange={onAboutMeChange}\r\n                    /> :\r\n                    <p className={styles.titleValue}>{props.aboutMe}</p>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nAboutMeField.propTypes = {\r\n    editMode: PropTypes.bool,\r\n    aboutMe: PropTypes.string\r\n};\r\n\r\nexport default AboutMeField;","import React from 'react';\r\nimport styles from './../Profile.module.css';\r\nimport PropTypes from \"prop-types\";\r\nimport AboutMeField from \"../AboutMeField/AboutMeField\";\r\n\r\nconst LookingForAJobField = (props) => {\r\n\r\n    let onLookingForAJobChange = (event) => {\r\n        props.setLookingForAJobChangeValue(event.currentTarget.checked);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <p className={styles.titleKey}>Ищу работу</p>\r\n            <input type=\"checkbox\" checked={props.lookingForAJob} onChange={onLookingForAJobChange}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nAboutMeField.propTypes = {\r\n    lookingForAJob: PropTypes.string\r\n};\r\n\r\nexport default LookingForAJobField;","import {connect} from \"react-redux\";\r\nimport {lookingForAJobSelector, setOwnerLookingForAJobAC} from \"../../../redux/reducers/profilePageReducer\";\r\nimport LookingForAJobField from \"./LookingForAJobField\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        lookingForAJob: lookingForAJobSelector(state)\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setLookingForAJobChangeValue: (value) => {\r\n            dispatch(setOwnerLookingForAJobAC(value));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LookingForAJobField);","import React from 'react';\r\nimport styles from './../Profile.module.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst LookingForAJobDescField = (props) => {\r\n\r\n    let onLookingForAJobDescriptionChange = (event) => {\r\n        props.setCurrentLookingForAJobDescriptionValue(event.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <p className={styles.titleKey}>Описание навыков</p>\r\n            {\r\n                props.editMode ?\r\n                    <textarea className={styles.editModeTitle}\r\n                              value={props.lookingForAJobDescription}\r\n                        onChange={onLookingForAJobDescriptionChange}\r\n                    /> :\r\n                    <p className={styles.titleValue}>{props.lookingForAJobDescription}</p>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nLookingForAJobDescField.propTypes = {\r\n    editMode: PropTypes.bool,\r\n    lookingForAJobDescription: PropTypes.string\r\n};\r\n\r\nexport default LookingForAJobDescField;","import {connect} from \"react-redux\";\r\nimport {\r\n    editModeSelector,\r\n    lookingForAJobDescriptionSelector,\r\n    setOwnerLookingForAJobDescriptionAC\r\n} from \"../../../redux/reducers/profilePageReducer\";\r\nimport LookingForAJobDescField from \"./LookingForAJobDescField\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        editMode: editModeSelector(state),\r\n        lookingForAJobDescription: lookingForAJobDescriptionSelector(state)\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrentLookingForAJobDescriptionValue: (value) => {\r\n            dispatch(setOwnerLookingForAJobDescriptionAC(value));\r\n        },\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LookingForAJobDescField);","import React from 'react';\r\nimport styles from './../Profile.module.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FullNameField = (props) => {\r\n\r\n    let onFullNameChange = (event) => {\r\n        props.setCurrentFullNameValue(event.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <p className={styles.titleKey}>Имя</p>\r\n            {\r\n                props.editMode ?\r\n                    <input type=\"text\"\r\n                           className={styles.editModeTitle}\r\n                           value={props.fullName}\r\n                           onChange={onFullNameChange}/> :\r\n                    <p className={styles.titleValue}>{props.fullName}</p>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nFullNameField.propTypes = {\r\n    editMode: PropTypes.bool,\r\n    fullName: PropTypes.string\r\n};\r\n\r\nexport default FullNameField;","import {connect} from \"react-redux\";\r\nimport {editModeSelector, fullNameSelector, setOwnerFullNameAC} from \"../../../redux/reducers/profilePageReducer\";\r\nimport FullNameField from \"./FullNameField\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        editMode: editModeSelector(state),\r\n        fullName: fullNameSelector(state)\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrentFullNameValue: (value) => {\r\n            dispatch(setOwnerFullNameAC(value));\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FullNameField);","import {connect} from \"react-redux\";\r\nimport {aboutMeSelector, editModeSelector, setOwnerAboutMeAC} from \"../../../redux/reducers/profilePageReducer\";\r\nimport AboutMeField from \"./AboutMeField\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        editMode: editModeSelector(state),\r\n        aboutMe: aboutMeSelector(state)\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCurrentAboutMeValue: (value) => {\r\n            dispatch(setOwnerAboutMeAC(value))\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AboutMeField);","import React from 'react';\r\nimport styles from './../Profile.module.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ProfilePhoto = (props) => {\r\n\r\n    let onPhotoChange = (event) => {\r\n        props.uploadAvatar(event.target.files[0])\r\n    };\r\n\r\n    return (\r\n        <div className={styles.profilePhotoWrapper}>\r\n            <img className={styles.profilePhotoImg} src={props.avatar ? props.avatar :'https://www.fillmurray.com/100/100'} alt=\"avatar\"/>\r\n            <input type=\"file\"\r\n                   id='ownerAvatar'\r\n                   onChange={onPhotoChange}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nProfilePhoto.propTypes = {\r\n    avatar: PropTypes.string\r\n};\r\n\r\nexport default ProfilePhoto;","import {connect} from \"react-redux\";\r\nimport ProfilePhoto from \"./ProfilePhoto\";\r\nimport {avatarSelector, uploadAvatarTC} from \"../../../redux/reducers/profilePageReducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        avatar: avatarSelector(state)\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        uploadAvatar: (file) => {\r\n            dispatch(uploadAvatarTC(file));\r\n        }\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfilePhoto);","import React from 'react';\r\nimport styles from \"../Profile/Profile.module.css\";\r\nimport PostsContainer from \"./Posts/PostsContainer\";\r\nimport ContactsFieldContainer from \"./ContactsField/ContactsFieldContainer\";\r\nimport LookingForAJobFieldContainer from \"./LookingForAJobField/LookingForAJobFieldContainer\";\r\nimport LookingForAJobDescFieldContainer\r\n    from \"./LookingForAJobDescField/LookingForAJobDescFieldContainer\";\r\nimport FullNameFieldContainer from \"./FullNameField/FullNameFieldContainer\";\r\nimport AboutMeFieldContainer from \"./AboutMeField/AboutMeFieldContainer\";\r\nimport ProfilePhotoContainer from \"./ProfilePhoto/ProfilePhotoContainer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    let onEditBtnClick = () => {\r\n        props.editMode();\r\n    };\r\n\r\n    let onSaveBtnClick = () => {\r\n        props.editMode();\r\n        props.saveProfile(props.profilePage);\r\n    };\r\n\r\n    if (props.authorization.isAuth) {\r\n        return (\r\n            <main>\r\n                <ProfilePhotoContainer/>\r\n                <FullNameFieldContainer/>\r\n                <AboutMeFieldContainer/>\r\n                <ContactsFieldContainer/>\r\n                <LookingForAJobFieldContainer/>\r\n                <LookingForAJobDescFieldContainer/>\r\n                {\r\n                    props.profilePage.editMode ?\r\n                        <button className={styles.btn} onClick={onSaveBtnClick}>Save</button> :\r\n                        <button className={styles.btn} onClick={onEditBtnClick}>Edit</button>\r\n                }\r\n                <PostsContainer/>\r\n            </main>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n                <p className={styles.redirectToLoginPage}>Только залогиненный пользователь может увидеть эту страницу.</p>\r\n                <NavLink to='/' className={styles.redirectToLoginPage}>Перейдите на страницу логина</NavLink>\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Profile;","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {getMyProfileTC, saveProfileTC, setOwnerIdAC, toggleEditModeAC} from \"../../redux/reducers/profilePageReducer\";\r\n\r\nlet ProfileContainer = class extends React.Component {\r\n    componentDidMount() {\r\n        if (this.props.authorization.isAuth) {\r\n            this.props.getMyProfile(this.props.authorization.userInfo.userId);\r\n            this.props.setOwnerId(this.props.authorization.userInfo.userId);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.authorization.userInfo.userId !== prevProps.profilePage.ownerId) {\r\n            this.props.getMyProfile(this.props.authorization.userInfo.userId);\r\n            this.props.setOwnerId(this.props.authorization.userInfo.userId);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props}/>\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n        authorization: state.authorization\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getMyProfile: (id) => {\r\n            dispatch(getMyProfileTC(id));\r\n        },\r\n        editMode: () => {\r\n            dispatch(toggleEditModeAC());\r\n        },\r\n        saveProfile: (profile) => {\r\n            dispatch(saveProfileTC(profile));\r\n        },\r\n        setOwnerId: (id) => {\r\n            dispatch(setOwnerIdAC(id));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileContainer);","export const statuses = {\r\n    STATUS_NOT_INITIALIZED: 'STATUS_NOT_INITIALIZED',\r\n    STATUS_IN_PROGRESS: 'STATUS_IN_PROGRESS',\r\n    STATUS_SUCCESS: 'STATUS_SUCCESS',\r\n    STATUS_ERROR: 'STATUS_ERROR'\r\n};\r\n","import {statuses} from \"../requestStatuses\";\r\nimport axiosInstance from \"./../../dal/axiosInstance\";\r\nimport Swal from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\n\r\nconst MySwal = withReactContent(Swal);\r\n\r\n// Actions\r\nconst SET_STATUS = 'social-network/users-page/SET_STATUS';\r\nconst SET_USERS = 'social-network/users-page/SET_USERS';\r\nconst SET_CURRENT_USER_ID = 'social-network/users-page/SET_CURRENT_USER_ID';\r\nconst SUBSCRIBE = 'social-network/users-page/SUBSCRIBE';\r\nconst UNSUBSCRIBE = 'social-network/users-page/UNSUBSCRIBE';\r\n\r\n\r\n// Initial state\r\nlet initialState = {\r\n    status: statuses.STATUS_NOT_INITIALIZED,\r\n    users: {},\r\n    currentUserId: null\r\n};\r\n\r\n// Selectors\r\nexport const statusSelector = state => state.usersPage.status;\r\nexport const currentUserIdSelector = state => state.usersPage.currentUserId;\r\nexport const usersSelector = state => state.usersPage.users;\r\n\r\nexport const transformedUsersSelector = (state) => {\r\n    let users = usersSelector(state);\r\n    // transform object users in array\r\n    return Object.keys(users).map(key => users[key]);\r\n};\r\n\r\n\r\n// Reducer\r\nconst usersPageReducer = (state = initialState, action) => {\r\n    let newState;\r\n\r\n    switch (action.type) {\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n\r\n        case SET_USERS:\r\n            // transform array from Server in object\r\n            action.users.forEach((item) => {\r\n                state.users[item.id] = item;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                users: state.users\r\n            };\r\n\r\n        case SET_CURRENT_USER_ID:\r\n            return {\r\n                ...state,\r\n                currentUserId: action.id\r\n            };\r\n\r\n        case SUBSCRIBE:\r\n            newState = {...state, users: {...state.users}};\r\n            newState.users[action.id].followed = true;\r\n            return newState;\r\n\r\n\r\n        case UNSUBSCRIBE:\r\n            newState = {...state, users: {...state.users}};\r\n            newState.users[action.id].followed = false;\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Action Creators\r\nexport const setStatusAC = status => ({type: SET_STATUS, status});\r\nexport const setUsersAC = users => ({type: SET_USERS, users});\r\nexport const setCurrentUserIdAC = id => ({type: SET_CURRENT_USER_ID, id});\r\nexport const subscribeAC = id => ({type: SUBSCRIBE, id});\r\nexport const unSubscribeAC = id => ({type: UNSUBSCRIBE, id});\r\n\r\n\r\n// Thunk Creators\r\nexport let getUsersTC = () => (dispatch) => {\r\n    dispatch(setStatusAC(statuses.STATUS_IN_PROGRESS));\r\n    axiosInstance.get('users?count=50')\r\n        .then((response) => {\r\n            dispatch(setUsersAC(response.data.items));\r\n            dispatch(setStatusAC(statuses.STATUS_SUCCESS));\r\n        })\r\n};\r\n\r\nexport let addToFriendsTC = (id) => (dispatch) => {\r\n    dispatch(setStatusAC(statuses.STATUS_IN_PROGRESS));\r\n    axiosInstance.post(`follow/${id}`)\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatusAC(statuses.STATUS_SUCCESS));\r\n                dispatch(subscribeAC(id));\r\n            } else {\r\n                dispatch(setStatusAC(statuses.STATUS_ERROR));\r\n                MySwal.fire({\r\n                    type: 'error',\r\n                    text: response.data.messages[0]\r\n                })\r\n            }\r\n        })\r\n        .catch((response) => {\r\n            MySwal.fire({\r\n                type: 'error',\r\n                text: response.response.data.message\r\n            })\r\n        })\r\n};\r\n\r\nexport let removeFromFriendsTC = (id) => (dispatch) => {\r\n    dispatch(setStatusAC(statuses.STATUS_IN_PROGRESS));\r\n    axiosInstance.delete(`follow/${id}`)\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatusAC(statuses.STATUS_SUCCESS));\r\n                dispatch(unSubscribeAC(id));\r\n            } else {\r\n                dispatch(setStatusAC(statuses.STATUS_ERROR));\r\n                MySwal.fire({\r\n                    type: 'error',\r\n                    text: response.data.messages[0]\r\n                })\r\n            }\r\n        })\r\n        .catch((response) => {\r\n            MySwal.fire({\r\n                type: 'error',\r\n                text: response.response.data.message\r\n            })\r\n        })\r\n};\r\n\r\nexport default usersPageReducer;","import React from 'react';\r\nimport styles from './User.module.css';\r\nimport PropTypes from \"prop-types\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst User = (props) => {\r\n\r\n    let onSubscribeClick = (event) => {\r\n        props.addToFriends(Number(event.currentTarget.dataset.userId));\r\n    };\r\n\r\n    let onUnsubscribeClick = (event) => {\r\n        props.removeFromFriends(Number(event.currentTarget.dataset.userId));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <NavLink className={styles.link} to={`/users/${props.item.id}`}>\r\n                <img className={styles.avatar}\r\n                     src={props.item.photos.small === null ? 'https://placecage.com/80/80' : props.item.photos.small}\r\n                     alt=\"avatar\"/>\r\n                <p className={styles.name}>{props.item.name.length > 15 ? `${props.item.name.substring(0, 12)} ...` : props.item.name}</p>\r\n            </NavLink>\r\n            {\r\n                props.item.followed ?\r\n                    <button data-user-id={props.item.id} className={styles.followBtn}\r\n                            onClick={onUnsubscribeClick}>Unsubscribe</button> :\r\n                    <button data-user-id={props.item.id} className={styles.followBtn}\r\n                            onClick={onSubscribeClick}>Subscribe</button>\r\n            }\r\n            <NavLink className={styles.sendBtn} to={`/dialogs/${props.item.id}`}>Send message</NavLink>\r\n        </>\r\n    );\r\n};\r\n\r\nUser.propTypes = {\r\n    item: PropTypes.object\r\n};\r\n\r\nexport default User;","import React from 'react';\r\nimport styles from './Users.module.css';\r\nimport User from \"./User/User\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Users = (props) => {\r\n\r\n    let usersList = props.users.map(item => {\r\n        return (\r\n            <div key={item.id}>\r\n                <User item={item} addToFriends={props.addToFriends} removeFromFriends={props.removeFromFriends}/>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h3>Users</h3>\r\n            <div className={styles.userList}>{usersList}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nUsers.propTypes = {\r\n    status: PropTypes.string\r\n};\r\n\r\nexport default Users;\r\n","import {connect} from \"react-redux\";\r\nimport {\r\n    addToFriendsTC,\r\n    getUsersTC,\r\n    removeFromFriendsTC,\r\n    statusSelector,\r\n    transformedUsersSelector\r\n} from \"../../redux/reducers/usersPageReducer\";\r\nimport React from \"react\";\r\nimport {statuses} from \"../../redux/requestStatuses\";\r\nimport Users from \"./Users\";\r\n\r\nlet UsersContainer = class extends React.Component {\r\n    componentDidMount() {\r\n        if (this.props.status === statuses.STATUS_NOT_INITIALIZED) {\r\n            this.props.getUsers();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Users {...this.props}/>\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        status: statusSelector(state),\r\n        users: transformedUsersSelector(state)\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getUsers: () => {\r\n            dispatch(getUsersTC());\r\n        },\r\n        addToFriends: (userId) => {\r\n            dispatch(addToFriendsTC(userId));\r\n        },\r\n        removeFromFriends: (userId) => {\r\n            dispatch(removeFromFriendsTC(userId));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersContainer);","import React from 'react';\r\nimport styles from './UnreadMesagesCount.module.css'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst UnreadMessagesCount = (props) => {\r\n    return (\r\n        <span className={styles.counter}>{props.unreadMessagesCounter}</span>\r\n    );\r\n};\r\n\r\nUnreadMessagesCount.propTypes = {\r\n    unreadMessagesCounter: PropTypes.number\r\n};\r\n\r\nexport default UnreadMessagesCount;","import {statuses} from \"../requestStatuses\";\r\nimport {\r\n    deleteMessage,\r\n    getDialogs,\r\n    getMessages,\r\n    getNewMessages,\r\n    newMessagesCount,\r\n    sendMessage,\r\n    updateDialogs\r\n} from \"../../dal/services\";\r\n\r\n// Actions\r\nconst SET_STATUS = 'social-network/dialogs-page/SET_STATUS';\r\nconst SET_DIALOGS = 'social-network/dialogs-page/SET_DIALOGS';\r\nconst SET_MESSAGES = 'social-network/dialogs-page/SET_MESSAGES';\r\nconst SET_CURRENT_DIALOG_ID = 'social-network/dialogs-page/SET_CURRENT_DIALOG_ID';\r\nconst SET_NEW_MESSAGE_TO_COUNTER = 'social-network/dialogs-page/SET_NEW_MESSAGE_TO_COUNTER';\r\nconst SET_NEW_MESSAGE_TO_STATE = 'social-network/dialogs-page/SET_NEW_MESSAGE_TO_STATE';\r\nconst ADD_NEW_MESSAGE_TO_STATE = 'social-network/dialogs-page/ADD_NEW_MESSAGE_TO_STATE';\r\n\r\n// Initial state\r\nlet initialState = {\r\n    status: statuses.STATUS_NOT_INITIALIZED,\r\n    dialogs: [],\r\n    currentDialogId: null,\r\n    messages: [],\r\n    unreadMessagesCounter: 0\r\n};\r\n\r\n\r\n// Selectors\r\nexport const dialogsSelector = state => state.dialogsPage.dialogs;\r\nexport const currentDialogIdSelector = state => state.dialogsPage.currentDialogId;\r\nexport const messagesSelector = state => state.dialogsPage.messages;\r\nexport const unreadMessagesCounterSelector = state => state.dialogsPage.unreadMessagesCounter;\r\n\r\n\r\n// Reducer\r\nconst dialogsPageReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n\r\n        case SET_DIALOGS:\r\n            return {\r\n                ...state,\r\n                dialogs: action.dialogs\r\n            };\r\n\r\n        case SET_MESSAGES:\r\n            return {\r\n                ...state,\r\n                messages: action.messages\r\n            };\r\n\r\n        case SET_CURRENT_DIALOG_ID:\r\n            return {\r\n                ...state,\r\n                currentDialogId: action.id\r\n            };\r\n\r\n        case SET_NEW_MESSAGE_TO_COUNTER:\r\n            return {\r\n                ...state,\r\n                unreadMessagesCounter: action.count\r\n            };\r\n\r\n        case SET_NEW_MESSAGE_TO_STATE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.message]\r\n            };\r\n\r\n        case ADD_NEW_MESSAGE_TO_STATE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.message]\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n// Action Creators\r\nexport const setStatusAC = status => ({type: SET_STATUS, status});\r\nexport const setDialogsAC = dialogs => ({type: SET_DIALOGS, dialogs});\r\nexport const setMessagesAC = messages => ({type: SET_MESSAGES, messages});\r\nexport const setCurrentDialogIdAC = id => ({type: SET_CURRENT_DIALOG_ID, id});\r\nexport const setNewMessageToUnreadCounterAC = count => ({type: SET_NEW_MESSAGE_TO_COUNTER, count});\r\nexport const setNewMessagesToStateAC = message => ({type: SET_NEW_MESSAGE_TO_STATE, message});\r\nexport const addNewMessageToState = message => ({type: ADD_NEW_MESSAGE_TO_STATE, message});\r\n\r\n\r\n// Thunk Creators\r\nexport const initialRequestsTC = (userId) => (dispatch) => {\r\n    updateDialogs(userId)\r\n        .then((res) => {\r\n            dispatch(setCurrentDialogIdAC(String(userId)))\r\n        })\r\n        .then(() => getDialogs())\r\n        .then((res) => dispatch(setDialogsAC(res)))\r\n        .then(() => getMessages(userId))\r\n        .then((res) => {\r\n            dispatch(setMessagesAC(res.items));\r\n        })\r\n};\r\n\r\nexport let getDialogsTC = () => (dispatch) => {\r\n    getDialogs()\r\n        .then(res => {\r\n                dispatch(setDialogsAC(res))\r\n            }\r\n        );\r\n};\r\n\r\nexport let sendMessageTC = (userId, body) => (dispatch) => {\r\n    sendMessage(userId, body)\r\n        .then((res) => {\r\n            dispatch(addNewMessageToState(res.data.message))\r\n        })\r\n};\r\n\r\n\r\nexport let deleteMessageTC = (messageId, userId) => (dispatch) => {\r\n    deleteMessage(messageId)\r\n        .then(() => getMessages(userId))\r\n        .then((res) => {\r\n            dispatch(setMessagesAC(res.items));\r\n        })\r\n};\r\n\r\nexport let newMessagesCountTC = () => (dispatch) => {\r\n    newMessagesCount()\r\n        .then((res) => {\r\n            dispatch(setNewMessageToUnreadCounterAC(res))\r\n        })\r\n};\r\n\r\n\r\nexport const updateUnreadDialogTC = (userId, date) => (dispatch) => {\r\n    updateDialogs(userId)\r\n        .then((res) => {\r\n            dispatch(setCurrentDialogIdAC(userId))\r\n        })\r\n        .then(() => getDialogs())\r\n        .then((res) => dispatch(setDialogsAC(res)))\r\n        .then(() => getNewMessages(userId, date))\r\n        .then((res) => {\r\n            dispatch(setNewMessagesToStateAC(res));\r\n        })\r\n};\r\n\r\n\r\nexport default dialogsPageReducer;","import {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport UnreadMessagesCount from \"./UnreadMesagesCount\";\r\nimport {newMessagesCountTC, unreadMessagesCounterSelector} from \"../../../redux/reducers/dialogsPageReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\nlet UnreadMessagesCountContainer = class extends React.Component {\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.props.newMessagesCount();\r\n        }, 50000)\r\n    }\r\n\r\n    render() {\r\n        return <UnreadMessagesCount {...this.props}/>\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        unreadMessagesCounter: unreadMessagesCounterSelector(state)\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        newMessagesCount: () => {\r\n            dispatch(newMessagesCountTC())\r\n        }\r\n    }\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(UnreadMessagesCountContainer));","import React from 'react';\r\nimport styles from './Header.module.css';\r\nimport logo from '../../img/logo.svg';\r\nimport UnreadMessagesCountContainer from './UnreadMessagesCount/UnreadMesagesCountContainer'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Header = (props) => {\r\n\r\n    let onLogOutBtnClick = () => {\r\n        props.logOut();\r\n        props.setAuth(false);\r\n        props.history.push('/');\r\n    };\r\n\r\n    let showNickName = props.isAuth &&\r\n        <div className={styles.info}>\r\n            <p className={styles.userName}>{props.userName} </p>\r\n            <div className={styles.imgWrapper}>\r\n                <img className={styles.avatar}\r\n                     src={props.avatar ? props.avatar : 'https://www.fillmurray.com/40/40'} alt=\"avatar\"/>\r\n                <UnreadMessagesCountContainer/>\r\n            </div>\r\n            <button className={styles.logOutBtn} onClick={onLogOutBtnClick}>Log out</button>\r\n        </div>;\r\n\r\n    return (\r\n        <header className={styles.header}>\r\n            <img className={styles.logo} src={logo} alt=\"logotype\"/>\r\n            {showNickName}\r\n        </header>\r\n    )\r\n};\r\n\r\nHeader.propTypes = {\r\n    isAuth: PropTypes.bool,\r\n    userName: PropTypes.string,\r\n    avatar: PropTypes.string\r\n};\r\n\r\nexport default Header;","import axiosInstance from \"../../dal/axiosInstance\";\r\n\r\n// Actions\r\nconst SET_IS_AUTH = 'social-network/auth-page/SET_IS_AUTH';\r\nconst SET_USER_NAME = 'social-network/auth-page/SET_USER_NAME';\r\nconst SET_USER_ID = 'social-network/auth-page/SET_USER_ID';\r\n\r\n// Initial state\r\nlet initialState = {\r\n    isAuth: false,\r\n    userInfo: {\r\n        userId: null,\r\n        userName: null,\r\n        avatarUrl: ''\r\n    }\r\n};\r\n\r\n// Selectors\r\nexport const isAuthSelector = state => state.authorization.isAuth;\r\nexport const userIdSelector = state => state.authorization.userInfo.userId;\r\nexport const userNameSelector = state => state.authorization.userInfo.userName;\r\n\r\n\r\n// Reducer\r\nconst authorizationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_IS_AUTH:\r\n            return {\r\n                ...state,\r\n                isAuth: action.value\r\n            };\r\n\r\n        case SET_USER_NAME:\r\n            return {\r\n                ...state,\r\n                userInfo: {\r\n                    ...state.userInfo,\r\n                    userName: action.login\r\n                }\r\n            };\r\n\r\n        case SET_USER_ID:\r\n            return {\r\n                ...state,\r\n                userInfo: {\r\n                    ...state.userInfo,\r\n                    userId: action.id\r\n                }\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Action Creators\r\nexport const setAuthAC = value => ({type: SET_IS_AUTH, value});\r\nexport const setUserNameAC = login => ({type: SET_USER_NAME, login});\r\nexport const setUserIdAC = id => ({type: SET_USER_ID, id});\r\n\r\n\r\n// Thunk Creators\r\nexport let authMeTC = () => (dispatch) => {\r\n    axiosInstance.get('auth/me')\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setUserIdAC(response.data.data.id));\r\n                dispatch(setUserNameAC(response.data.data.login));\r\n                dispatch(setAuthAC(true));\r\n            }\r\n        })\r\n};\r\n\r\n\r\nexport let logOutTC = () => (dispatch) => {\r\n    axiosInstance.post('auth/logout')\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setUserIdAC(null));\r\n                dispatch(setUserNameAC(null));\r\n                dispatch(setAuthAC(false));\r\n            }\r\n        })\r\n};\r\n\r\nexport default authorizationReducer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Header from \"./Header\";\r\nimport {\r\n    authMeTC,\r\n    isAuthSelector,\r\n    logOutTC,\r\n    setAuthAC,\r\n    userNameSelector\r\n} from \"../../redux/reducers/authorizationReducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {avatarSelector} from \"../../redux/reducers/profilePageReducer\";\r\n\r\nlet HeaderContainer = class extends React.Component {\r\n    componentDidMount() {\r\n        this.props.authMe();\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n};\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: isAuthSelector(state),\r\n        userName: userNameSelector(state),\r\n        avatar: avatarSelector(state)\r\n    }\r\n};\r\n\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        authMe: () => {\r\n            dispatch(authMeTC())\r\n        },\r\n        logOut: () => {\r\n            dispatch(logOutTC())\r\n        },\r\n        setAuth: (value) => {\r\n            dispatch(setAuthAC(value))\r\n        }\r\n    }\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(HeaderContainer));","import React from 'react';\r\nimport styles from \"./UserProfile.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst UserProfile = (props) => {\r\n\r\n    let contacts = Object.keys(props.userProfile.contacts).map((item, i) => {\r\n        return (\r\n            <div className={styles.contactsWrapper} key={i}>\r\n                <p className={styles.contactsTitle}>{item}: </p>\r\n                <div>{props.userProfile.contacts[item]}</div>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h2>User profile</h2>\r\n            <div className={styles.wrapper}>\r\n                <p className={styles.titleKey}>Имя</p>\r\n                <p className={styles.titleValue}>{props.userProfile.fullName}</p>\r\n            </div>\r\n            <div className={styles.wrapper}>\r\n                <p className={styles.titleKey}>Обо мне</p>\r\n                <p className={styles.titleValue}>{props.userProfile.aboutMe}</p>\r\n            </div>\r\n            <div className={styles.contactsWrapper}>\r\n                <p className={styles.contactsTitleKey}>Контакты</p>\r\n                <div>{contacts}</div>\r\n            </div>\r\n            <div className={styles.wrapper}>\r\n                <p className={styles.titleKey}>Ищу работу</p>\r\n                <input type=\"checkbox\" checked={props.userProfile.lookingForAJob} onChange={() => ({})}/>\r\n            </div>\r\n            <div className={styles.wrapper}>\r\n                <p className={styles.titleKey}>Описание навыков</p>\r\n                <p className={styles.titleValue}>{props.userProfile.lookingForAJobDescription}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nUserProfile.propTypes = {\r\n    userProfile: PropTypes.object,\r\n    currentUserId: PropTypes.string\r\n};\r\n\r\n\r\nexport default UserProfile;","import axiosInstance from \"../../dal/axiosInstance\";\r\n\r\n// Actions\r\nconst SET_USER_FULL_NAME = 'social-network/user-profile/SET_USER_FULL_NAME';\r\nconst SET_USER_ABOUT_ME = 'social-network/user-profile/SET_USER_ABOUT_ME';\r\nconst SET_USER_CONTACTS = 'social-network/user-profile/SET_USER_CONTACTS';\r\nconst SET_LOOKING_FOR_A_JOB = 'social-network/user-profile/SET_LOOKING_FOR_A_JOB';\r\nconst SET_LOOKING_FOR_A_JOB_DESCRIPTION = 'social-network/user-profile/SET_LOOKING_FOR_A_JOB_DESCRIPTION';\r\n\r\n\r\n// Initial state\r\nlet initialState = {\r\n    fullName: '',\r\n    aboutMe: '',\r\n    contacts: {\r\n        facebook: '',\r\n        github: '',\r\n        instagram: '',\r\n        mainLink: '',\r\n        twitter: '',\r\n        vk: '',\r\n        website: '',\r\n        youtube: ''\r\n    },\r\n    lookingForAJob: false,\r\n    lookingForAJobDescription: ''\r\n};\r\n\r\n// Reducer\r\nconst userProfileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_FULL_NAME:\r\n            return {\r\n                ...state,\r\n                fullName: action.value\r\n            };\r\n\r\n        case SET_USER_ABOUT_ME:\r\n            return {\r\n                ...state,\r\n                aboutMe: action.value\r\n            };\r\n\r\n        case SET_USER_CONTACTS:\r\n            return {\r\n                ...state,\r\n                contacts: action.value\r\n            };\r\n\r\n        case SET_LOOKING_FOR_A_JOB:\r\n            return {\r\n                ...state,\r\n                lookingForAJob: action.value\r\n            };\r\n\r\n        case SET_LOOKING_FOR_A_JOB_DESCRIPTION:\r\n            return {\r\n                ...state,\r\n                lookingForAJobDescription: action.value\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Action Creators\r\nexport const setUserFullNameAC = (value) => ({type: SET_USER_FULL_NAME, value});\r\nexport const setUserAboutMeAC = (value) => ({type: SET_USER_ABOUT_ME, value});\r\nexport const setUserContactsAC = (value) => ({type: SET_USER_CONTACTS, value});\r\nexport const setUserLookingForAJobAC = (value) => ({type: SET_LOOKING_FOR_A_JOB, value});\r\nexport const setUserLookingForAJobDescriptionAC = (value) => ({type: SET_LOOKING_FOR_A_JOB_DESCRIPTION, value});\r\n\r\n\r\n//Thunk Creators\r\nexport let getUserProfileTC = (id) => (dispatch) => {\r\n    axiosInstance.get(`profile/${id}`)\r\n        .then((response) => {\r\n            dispatch(setUserFullNameAC(response.data.fullName));\r\n            dispatch(setUserAboutMeAC(response.data.aboutMe));\r\n            dispatch(setUserContactsAC(response.data.contacts));\r\n            dispatch(setUserLookingForAJobAC(response.data.lookingForAJob));\r\n            dispatch(setUserLookingForAJobDescriptionAC(response.data.lookingForAJobDescription));\r\n        })\r\n};\r\n\r\nexport default userProfileReducer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport UserProfile from \"./UserProfile\";\r\nimport {getUserProfileTC} from \"../../redux/reducers/userProfileReducer\";\r\nimport {currentUserIdSelector, setCurrentUserIdAC} from \"../../redux/reducers/usersPageReducer\";\r\n\r\n\r\nlet UserProfileContainer = class extends React.Component {\r\n    componentDidMount() {\r\n        this.props.getUserProfile(this.props.match.params.userId);\r\n        this.props.setCurrentUserId(this.props.match.params.userId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.match.params.userId !== prevProps.currentUserId) {\r\n            this.props.getUserProfile(this.props.match.params.userId);\r\n            this.props.setCurrentUserId(this.props.match.params.userId);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <UserProfile {...this.props}/>\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        userProfile: state.userProfile,\r\n        currentUserId: currentUserIdSelector(state)\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getUserProfile: (id) => {\r\n            dispatch(getUserProfileTC(id));\r\n        },\r\n        setCurrentUserId: (id) => {\r\n            dispatch(setCurrentUserIdAC(id));\r\n        }\r\n    }\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(UserProfileContainer));","import React from 'react';\r\nimport styles from './NotFound.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <>\r\n            <h2 className={styles.title}>404</h2>\r\n            <p className={styles.desc}>page not found</p>\r\n            <NavLink to='/' className={styles.redirectToLoginPage}>Перейдите на страницу логина</NavLink>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport styles from './Dialogs.module.css'\r\nimport PropTypes from \"prop-types\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nlet Dialogs = (props) => {\r\n\r\n    let messages = props.messages.map(item => {\r\n        if (item.senderId === props.userId) {\r\n            return (\r\n                <div className={styles.ownerMessagesWrapper} key={item.id}>\r\n                    <p className={styles.ownerMessagesContent}>{item.body}\r\n                        <span className={styles.deleteOwnerMessage}\r\n                              onClick={() => {\r\n                                  return onDeleteMessageClick(item.id)\r\n                              }}>Delete\r\n                            </span>\r\n                    </p>\r\n                    <div>\r\n                        <img className={styles.avatar}\r\n                             src={props.avatar ? props.avatar : 'https://www.fillmurray.com/50/50'}\r\n                             alt=\"avatar\"/>\r\n                        <p className={styles.name}>{item.senderName}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className={styles.userMessagesWrapper} key={item.id}>\r\n                    <div>\r\n                        <img className={styles.avatar} src='https://placecage.com/50/50'\r\n                             alt=\"avatar\"/>\r\n                        <p className={styles.name}>{item.senderName}</p>\r\n                    </div>\r\n                    <p className={styles.userMessagesContent}>{item.body}\r\n                        <span className={styles.deleteUserMessage}\r\n                              onClick={() => {\r\n                                  return onDeleteMessageClick(item.id)\r\n                              }}>Delete\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n    });\r\n\r\n    let newMessageRef = React.createRef();\r\n\r\n    let onSendButtonClick = () => {\r\n        props.sendMessage(props.match.params.userId, newMessageRef.current.value);\r\n        newMessageRef.current.value = '';\r\n    };\r\n\r\n    let onDialogClick = (userId) => {\r\n        props.history.push(`/dialogs/${userId}`);\r\n        props.initialRequests(userId);\r\n    };\r\n\r\n    let onDeleteMessageClick = (messageId) => {\r\n        props.deleteMessage(messageId, props.match.params.userId)\r\n    };\r\n\r\n\r\n    if (props.isAuth) {\r\n        return (\r\n            <div className={styles.wrapper}>\r\n                <div className={styles.dialogsWrapper}>\r\n                    {\r\n                        props.dialogs.map(item => {\r\n                            let hasNewMessages = item.hasNewMessages ?\r\n                                <span className={styles.newMessagesLabel}> NEW</span>\r\n                                : null;\r\n\r\n                            return (\r\n                                <div key={item.id} onClick={() => {\r\n                                    return onDialogClick(item.id)\r\n                                }}>\r\n                                    {\r\n                                        String(item.id) === props.currentDialogId ?\r\n                                            <p className={styles.currentDialog}>{item.userName}{hasNewMessages}</p> :\r\n                                            <p className={styles.dialog}>{item.userName} {hasNewMessages}</p>\r\n                                    }\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                <div className={styles.messagesWrapper}>\r\n                    {messages}\r\n                    <div className={styles.addMessagesWrapper}>\r\n                    <textarea className={styles.addMessagesField} ref={newMessageRef}\r\n                              placeholder=\"Write a message\"/>\r\n                        <button className={styles.addMessagesBtn} onClick={onSendButtonClick}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <p className={styles.redirectToLoginPage}>Только залогиненный пользователь может увидеть эту\r\n                    страницу.</p>\r\n                <NavLink to='/' className={styles.redirectToLoginPage}>Перейдите на страницу логина</NavLink>\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nDialogs.propTypes = {\r\n    dialogs: PropTypes.array,\r\n    currentDialogId: PropTypes.string,\r\n    messages: PropTypes.array,\r\n    unreadMessagesCounter: PropTypes.number,\r\n    userId: PropTypes.number,\r\n    avatar: PropTypes.string\r\n};\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    currentDialogIdSelector,\r\n    deleteMessageTC,\r\n    dialogsSelector,\r\n    getDialogsTC,\r\n    initialRequestsTC,\r\n    messagesSelector,\r\n    sendMessageTC,\r\n    unreadMessagesCounterSelector,\r\n    updateUnreadDialogTC\r\n} from \"../../redux/reducers/dialogsPageReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {isAuthSelector, userIdSelector} from \"../../redux/reducers/authorizationReducer\";\r\nimport {avatarSelector} from \"../../redux/reducers/profilePageReducer\";\r\n\r\n\r\nlet DialogsContainer = class extends React.Component {\r\n    componentDidMount() {\r\n        if (this.props.match.params.userId) {\r\n            this.props.initialRequests(this.props.match.params.userId);\r\n        } else {\r\n            this.props.getDialogs();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.match.params.userId) {\r\n\r\n            let lastMessage = this.props.messages[this.props.messages.length - 1];\r\n\r\n            if (this.props.match.params.userId !== String(prevProps.currentDialogId )) {\r\n                this.props.initialRequests(this.props.match.params.userId);\r\n            }\r\n            if (this.props.unreadMessagesCounter !== prevProps.unreadMessagesCounter) {\r\n                this.props.updateUnreadDialog(this.props.match.params.userId, lastMessage.addedAt);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Dialogs {...this.props}/>\r\n    }\r\n};\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: dialogsSelector(state),\r\n        currentDialogId: currentDialogIdSelector(state),\r\n        messages: messagesSelector(state),\r\n        unreadMessagesCounter: unreadMessagesCounterSelector(state),\r\n        userId: userIdSelector(state),\r\n        avatar: avatarSelector(state),\r\n        isAuth: isAuthSelector(state)\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        initialRequests: (userId) => {\r\n            dispatch(initialRequestsTC(userId))\r\n        },\r\n        getDialogs: () => {\r\n            dispatch(getDialogsTC())\r\n        },\r\n        sendMessage: (userId, message) => {\r\n            dispatch(sendMessageTC(userId, message))\r\n        },\r\n        deleteMessage: (messageId, userId) => {\r\n            dispatch(deleteMessageTC(messageId, userId))\r\n        },\r\n        updateUnreadDialog: (userId, date) => {\r\n            dispatch(updateUnreadDialogTC(userId, date))\r\n        }\r\n    }\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(DialogsContainer));","import {statuses} from \"../requestStatuses\";\r\nimport axiosInstance from \"../../dal/axiosInstance\";\r\nimport {authMeTC} from \"./authorizationReducer\";\r\n\r\n// Actions\r\nconst SET_STATUS = 'social-network/login-page/SET_STATUS';\r\nconst SET_MESSAGE = 'social-network/login-page/SET_MESSAGE';\r\n\r\n\r\n// Initial state\r\nlet initialState = {\r\n    status: statuses.STATUS_NOT_INITIALIZED,\r\n    message: ''\r\n};\r\n\r\n// Selectors\r\nexport const statusSelector = state => state.loginPage.status;\r\nexport const messageSelector = state => state.loginPage.message;\r\n\r\n\r\n// Reducer\r\nconst loginPageReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n\r\n        case SET_MESSAGE:\r\n            return {\r\n                ...state,\r\n                message: action.message\r\n            };\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Action Creators\r\nexport const setStatusAC = (status) => ({type: SET_STATUS, status});\r\nexport const setMessageAC = (message) => ({type: SET_MESSAGE, message});\r\n\r\n// Thunk Creators\r\nexport let loginTC = (email, password, rememberMe) => (dispatch) => {\r\n    dispatch(setStatusAC(statuses.STATUS_IN_PROGRESS));\r\n    axiosInstance.post('auth/login', {\r\n        email,\r\n        password,\r\n        rememberMe\r\n    })\r\n        .then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatusAC(statuses.STATUS_SUCCESS));\r\n                dispatch(authMeTC());\r\n            } else {\r\n                dispatch(setStatusAC(statuses.STATUS_ERROR));\r\n                dispatch(setMessageAC(response.data.messages[0]));\r\n            }\r\n        })\r\n};\r\n\r\n\r\nexport default loginPageReducer;","import React from 'react';\r\nimport styles from './LoginForm.module.css';\r\nimport {Field} from \"redux-form\";\r\nimport {statuses} from \"../../redux/requestStatuses\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nlet LoginForm = (props) => {\r\n    const {handleSubmit, pristine, reset, submitting} = props;\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to='/profile'/>\r\n    }\r\n\r\n    let errorMessage = props.status === statuses.STATUS_ERROR &&\r\n        <div className={styles.statusError}>{props.message}</div>;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h2>Registration page</h2>\r\n            <div className={styles.testDataWrapper}>\r\n                <p className={styles.testTitle}>Enter the following values to test the application</p>\r\n                <p className={styles.testValue}>email: safronmanbox@gmail.com</p>\r\n                <p className={styles.testValue}>password: 111</p>\r\n            </div>\r\n            <div className={styles.wrapper}>\r\n                {errorMessage}\r\n                <div className={styles.fieldWrapper}>\r\n                    <label className={styles.fieldLabel} htmlFor=\"email\">Email: </label>\r\n                    <Field className={styles.fieldInput} name=\"email\" component=\"input\" type=\"email\"/>\r\n                </div>\r\n                <div className={styles.fieldWrapper}>\r\n                    <label className={styles.fieldLabel} htmlFor=\"password\">Password:</label>\r\n                    <Field className={styles.fieldInput} name=\"password\" component=\"input\" type=\"password\"/>\r\n                </div>\r\n                <div className={styles.fieldWrapper}>\r\n                    <Field name=\"saveData\" component=\"input\" type=\"checkbox\"/>\r\n                    <label className={styles.fieldCheckboxLabel} htmlFor=\"saveData\">Remember me</label>\r\n                </div>\r\n                <div className={styles.btnWrapper}>\r\n                    <button className={styles.btn} type=\"submit\" disabled={pristine || submitting}>Log in</button>\r\n                    <button className={styles.btn} type=\"button\" disabled={pristine || submitting} onClick={reset}>\r\n                        Clear Values\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nLoginForm.propTypes = {\r\n    status: PropTypes.string,\r\n    message: PropTypes.string,\r\n    isAuth: PropTypes.bool\r\n};\r\n\r\nexport default LoginForm;\r\n\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {loginTC, messageSelector, statusSelector} from \"../../redux/reducers/loginPageReducer\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport React from \"react\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {isAuthSelector} from \"../../redux/reducers/authorizationReducer\";\r\n\r\nlet LoginFormUnderReduxForm = reduxForm({\r\n    form: 'loginForm'\r\n})(LoginForm);\r\n\r\nlet LoginFormContainer = class extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.submit = this.submit.bind(this);\r\n    }\r\n\r\n    submit(values) {\r\n        this.props.login(values.email, values.password, values.saveData);\r\n    };\r\n\r\n    render() {\r\n        return <LoginFormUnderReduxForm {...this.props} onSubmit={this.submit}/>\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        status: statusSelector(state),\r\n        message: messageSelector(state),\r\n        isAuth: isAuthSelector(state)\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (mail, password, rememberMe) => {\r\n            dispatch(loginTC(mail, password, rememberMe))\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginFormContainer);","import React from 'react';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport UserProfileContainer from \"./components/UserProfile/UserProfileContainer\";\r\nimport NotFound from \"./components/NotFound/NotFound\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport LoginFormContainer from \"./components/LoginForm/LoginFormContainer\";\r\n\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <HeaderContainer/>\r\n            <div className=\"sidebar\">\r\n                <Navbar/>\r\n                <UsersContainer/>\r\n            </div>\r\n            <div className=\"app-wrapper__content\">\r\n                <Switch>\r\n                    <Route exact path='/' render={() => <LoginFormContainer/>}/>\r\n                    <Route path='/profile' component={ProfileContainer}/>\r\n                    <Route path='/users/:userId' component={UserProfileContainer}/>\r\n                    <Route path='/dialogs/:userId?' component={DialogsContainer}/>\r\n                    <Route path='/settings' component={Settings}/>\r\n                    <Route component={NotFound}/>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport {Provider} from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport profilePageReducer from \"./redux/reducers/profilePageReducer\";\r\nimport usersPageReducer from \"./redux/reducers/usersPageReducer\";\r\nimport loginPageReducer from \"./redux/reducers/loginPageReducer\";\r\nimport authorizationReducer from \"./redux/reducers/authorizationReducer\";\r\nimport userProfileReducer from \"./redux/reducers/userProfileReducer\";\r\nimport dialogsPageReducer from \"./redux/reducers/dialogsPageReducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\n\r\nlet combinedReducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    usersPage: usersPageReducer,\r\n    loginPage: loginPageReducer,\r\n    authorization: authorizationReducer,\r\n    userProfile: userProfileReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(combinedReducers, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__hmrZL\",\"logo\":\"Header_logo__N8XJL\",\"info\":\"Header_info__2-35Q\",\"userName\":\"Header_userName__3EKYK\",\"imgWrapper\":\"Header_imgWrapper__2eAUZ\",\"avatar\":\"Header_avatar__2Md-F\",\"logOutBtn\":\"Header_logOutBtn__3d2Yr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"User_link__3XrY1\",\"avatar\":\"User_avatar__EmJQo\",\"name\":\"User_name__3tF_8\",\"sendBtn\":\"User_sendBtn__vuj6j index_commonBtn__3wLwH\",\"followBtn\":\"User_followBtn__jGgk8 User_sendBtn__vuj6j index_commonBtn__3wLwH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPost\":\"AddPost_newPost__10-i4\",\"heading\":\"AddPost_heading__2p5cl\",\"newPostTextarea\":\"AddPost_newPostTextarea__d0sUc\",\"newPostBtn\":\"AddPost_newPostBtn__2GhHF index_commonBtn__3wLwH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__28QXg\",\"titleValue\":\"Profile_titleValue__9wIKP\",\"titleKey\":\"Profile_titleKey__1Pwdh Profile_titleValue__9wIKP\",\"contactsTitleKey\":\"Profile_contactsTitleKey__2j0sr Profile_titleKey__1Pwdh Profile_titleValue__9wIKP\",\"contactsTitle\":\"Profile_contactsTitle__322WF\",\"contactsWrapper\":\"Profile_contactsWrapper__1ljo1\",\"profilePhotoWrapper\":\"Profile_profilePhotoWrapper__A9sl0\",\"profilePhotoImg\":\"Profile_profilePhotoImg__y1O7x\",\"editModeTitle\":\"Profile_editModeTitle__g-9Wt\",\"btn\":\"Profile_btn__3KDJN index_commonBtn__3wLwH\",\"redirectToLoginPage\":\"Profile_redirectToLoginPage__Jjq87 index_redirectToLoginPage__26ZeN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"NotFound_title__2a28l\",\"desc\":\"NotFound_desc__136nz\",\"redirectToLoginPage\":\"NotFound_redirectToLoginPage__37c2x index_redirectToLoginPage__26ZeN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"Post_postItem__2evol\",\"postAvatar\":\"Post_postAvatar__kmzMZ\"};"],"sourceRoot":""}